function max_lambda = fv_search_max_lxf_lambda(grid,params)
%function max_lambda = fv_search_max_lxf_lambda([grid],params)
%
% function trying various values for mu and determining the lambdas
% of the corresponding flux. This value needs to be set for
% params.lxf_lambda in simulations.
%
% if grid is empty, it is generated by grid_geometry
%
% 100 random mu are generated
%
% required fields of params:
% mu_names : cell array of names of the parameter components
% mu_ranges : cell array of [min max] ranges for the mu-components

% This program is open source.  For license terms, see the COPYING file.
%
% --------------------------------------------------------------------
% ATTRIBUTION NOTICE:
% This product includes software developed for the RBmatlab project at
% (C) Universities of Stuttgart and MÃ¼nster, Germany.
%
% RBmatlab is a MATLAB software package for model reduction with an
% emphasis on Reduced Basis Methods. The project is maintained by
% M. Dihlmann, M. Drohmann, B. Haasdonk, M. Ohlberger and M. Schaefer.
% For Online Documentation and Download we refer to www.morepas.org.
% --------------------------------------------------------------------


% Bernard Haasdonk 23.7.2006

max_lambda = -1;

if isempty(grid)
  grid = construct_grid(params);
end;
  
for loops = 1:100
  
  % choose random mu in allowed interval
  mu = rand(length(params.mu_names),1);
  for i = 1:length(params.mu_names)
    mu(i) = mu(i)*params.mu_ranges{i}(1) + ...
	    (1-mu(i))*params.mu_ranges{i}(2);
  end;
  params = set_mu(mu,params);
  
  params.affine_decomp_mode = 'complete';
  f = fv_conv_flux_matrix(ones(size(grid.CX)),grid,params);

  if params.verbose >= 9
    disp(['mu = [',num2str(mu(:)'),'] => lambda = ',num2str(f.lambda)]);
  end;  
  
  if f.lambda> max_lambda
    max_lambda = f.lambda;
    if params.verbose>=9
      disp(['current maximum lambda = ',num2str(max_lambda)]);
    end;
  end;
  
end;


% TO BE ADJUSTED TO NEW SYNTAX
%| \docupdate 
