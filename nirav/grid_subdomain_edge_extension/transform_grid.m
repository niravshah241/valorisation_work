function [ transformed_grid, F_transformation_matrix, ...
    C_translation_vector] = transform_grid( params, grid, mu_x, mu_y)

S = load(strcat('mygridnirav',...
    num2str(params.mesh_number),'_extension'),'p','e','t');

mu_reference_x = params.reference_parameter(1);
mu_reference_y = params.reference_parameter(2);

reference_coordinate = [0 0 0 1 0.1 1;...
    0.9 0 0.7 0 mu_reference_x mu_reference_y;...
    1 1 1 0 0.9 1; ...
    0 0 0.1 0 0.1 1;...
    mu_reference_x mu_reference_y 0.1 0 0.1 1;...
    0.1 0 0.3 0 mu_reference_x mu_reference_y;...
    0.9 0 0.9 1 mu_reference_x mu_reference_y;...
    0.9 0 1 0 0.9 1;...
    0.1 1 0.9 1 mu_reference_x mu_reference_y];

transformed_coordinate = [0 0 0 1 0.1 1;...
    0.9 0 0.7 0 mu_x mu_y;...
    1 1 1 0 0.9 1; ...
    0 0 0.1 0 0.1 1;...
    mu_x mu_y 0.1 0 0.1 1;...
    0.1 0 0.3 0 mu_x mu_y;...
    0.9 0 0.9 1 mu_x mu_y;...
    0.9 0 1 0 0.9 1;...
    0.1 1 0.9 1 mu_x mu_y];

for i = min(S.t(4,:)):1:max(S.t(4,:))
    [ F_transformation_matrix{i}, C_translation_vector{i} ] = ...
        compute_2d_affine_transformation_matrix( ...
        reference_coordinate(i,:)', transformed_coordinate(i,:)');
end

p_new = zeros(size(S.p));
t_new = S.t;
e_new = S.e;

for J = 1:1:size(S.t,2)
    subdomain_index = S.t(4,J);
    for I = 1:1:3
        p_index = S.t(I,J);
        p_new(:,p_index) = F_transformation_matrix{subdomain_index} * ...
            S.p(:,p_index) + C_translation_vector{subdomain_index};
    end
end

transformed_grid = triagrid(p_new,t_new,params);
transformed_grid = set_boundary_types(transformed_grid,params);

figure()
plot(transformed_grid);
title('transformed grid');

end