
#line 1 "postprocess.rl"

#include <string>
#include <fstream>
#include <iostream>
#include <cstdlib>

using std::cin;
using std::cout;
using std::cerr;
using std::ifstream;
using std::ofstream;
using std::string;
using std::ios_base;
using std::endl;


#line 20 "postprocess.cc"
static const char _PostProcess_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 2, 2, 12, 2, 2, 13
};

static const short _PostProcess_key_offsets[] = {
	0, 0, 1, 2, 3, 4, 5, 6, 
	7, 8, 9, 10, 11, 12, 13, 14, 
	15, 16, 17, 18, 19, 20, 21, 22, 
	23, 24, 25, 26, 27, 28, 29, 30, 
	31, 32, 33, 34, 35, 36, 37, 38, 
	39, 40, 41, 42, 43, 44, 45, 46, 
	47, 48, 49, 50, 51, 52, 53, 54, 
	55, 56, 57, 59, 60, 61, 62, 63, 
	64, 65, 66, 67, 68, 69, 70, 71, 
	72, 73, 74, 75, 76, 77, 78, 79, 
	80, 81, 82, 83, 84, 85, 86, 87, 
	88, 89, 90, 91, 108, 122, 138, 153, 
	168, 183, 198, 213, 228, 243, 258, 273, 
	288, 303, 318, 333, 348, 363, 378, 393, 
	408, 423, 438, 452, 467, 482, 497, 512, 
	527, 542, 557, 573, 588, 596, 605, 606, 
	613, 621
};

static const char _PostProcess_trans_keys[] = {
	115, 117, 98, 115, 116, 95, 58, 115, 
	117, 98, 115, 116, 105, 116, 117, 116, 
	101, 58, 115, 117, 98, 115, 116, 105, 
	116, 117, 116, 101, 115, 116, 97, 114, 
	116, 58, 58, 58, 115, 117, 98, 115, 
	116, 105, 116, 117, 116, 101, 115, 116, 
	97, 114, 116, 58, 58, 58, 101, 116, 
	115, 115, 117, 117, 98, 115, 116, 105, 
	116, 117, 116, 101, 101, 110, 100, 98, 
	115, 116, 105, 116, 117, 116, 101, 101, 
	110, 100, 115, 98, 117, 115, 95, 99, 
	111, 116, 109, 32, 38, 62, 91, 93, 
	95, 109, 110, 114, 123, 125, 9, 10, 
	40, 41, 58, 60, 32, 38, 62, 91, 
	93, 95, 123, 125, 9, 10, 40, 41, 
	58, 60, 32, 38, 62, 91, 93, 95, 
	97, 116, 123, 125, 9, 10, 40, 41, 
	58, 60, 32, 38, 62, 91, 93, 95, 
	116, 123, 125, 9, 10, 40, 41, 58, 
	60, 32, 38, 62, 91, 93, 95, 108, 
	123, 125, 9, 10, 40, 41, 58, 60, 
	32, 38, 62, 91, 93, 95, 97, 123, 
	125, 9, 10, 40, 41, 58, 60, 32, 
	38, 62, 91, 93, 95, 98, 123, 125, 
	9, 10, 40, 41, 58, 60, 32, 38, 
	62, 91, 93, 95, 116, 123, 125, 9, 
	10, 40, 41, 58, 60, 32, 38, 62, 
	91, 93, 95, 121, 123, 125, 9, 10, 
	40, 41, 58, 60, 32, 38, 62, 91, 
	93, 95, 112, 123, 125, 9, 10, 40, 
	41, 58, 60, 32, 38, 62, 91, 93, 
	95, 101, 123, 125, 9, 10, 40, 41, 
	58, 60, 32, 38, 62, 91, 93, 95, 
	115, 123, 125, 9, 10, 40, 41, 58, 
	60, 32, 38, 62, 91, 93, 95, 117, 
	123, 125, 9, 10, 40, 41, 58, 60, 
	32, 38, 62, 91, 93, 95, 98, 123, 
	125, 9, 10, 40, 41, 58, 60, 32, 
	38, 62, 91, 93, 95, 115, 123, 125, 
	9, 10, 40, 41, 58, 60, 32, 38, 
	62, 91, 93, 95, 116, 123, 125, 9, 
	10, 40, 41, 58, 60, 32, 38, 62, 
	91, 93, 95, 105, 123, 125, 9, 10, 
	40, 41, 58, 60, 32, 38, 62, 91, 
	93, 95, 116, 123, 125, 9, 10, 40, 
	41, 58, 60, 32, 38, 62, 91, 93, 
	95, 117, 123, 125, 9, 10, 40, 41, 
	58, 60, 32, 38, 62, 91, 93, 95, 
	116, 123, 125, 9, 10, 40, 41, 58, 
	60, 32, 38, 62, 91, 93, 95, 101, 
	123, 125, 9, 10, 40, 41, 58, 60, 
	32, 38, 62, 91, 93, 95, 111, 123, 
	125, 9, 10, 40, 41, 58, 60, 32, 
	38, 62, 91, 93, 95, 99, 123, 125, 
	9, 10, 40, 41, 58, 60, 32, 38, 
	62, 91, 93, 95, 123, 125, 9, 10, 
	40, 41, 58, 60, 32, 38, 62, 91, 
	93, 95, 111, 123, 125, 9, 10, 40, 
	41, 58, 60, 32, 38, 62, 91, 93, 
	95, 114, 123, 125, 9, 10, 40, 41, 
	58, 60, 32, 38, 62, 91, 93, 95, 
	101, 123, 125, 9, 10, 40, 41, 58, 
	60, 32, 38, 62, 91, 93, 95, 116, 
	123, 125, 9, 10, 40, 41, 58, 60, 
	32, 38, 58, 62, 91, 93, 95, 123, 
	125, 9, 10, 40, 41, 59, 60, 32, 
	38, 62, 91, 93, 95, 101, 123, 125, 
	9, 10, 40, 41, 58, 60, 32, 38, 
	62, 91, 93, 95, 116, 123, 125, 9, 
	10, 40, 41, 58, 60, 32, 38, 58, 
	62, 91, 93, 95, 115, 123, 125, 9, 
	10, 40, 41, 59, 60, 32, 38, 58, 
	62, 91, 93, 95, 123, 125, 9, 10, 
	40, 41, 59, 60, 45, 58, 92, 95, 
	65, 90, 97, 122, 45, 92, 95, 48, 
	57, 65, 90, 97, 122, 114, 45, 92, 
	95, 65, 90, 97, 122, 45, 92, 48, 
	57, 65, 90, 97, 122, 116, 0
};

static const char _PostProcess_single_lengths[] = {
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 11, 8, 10, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	9, 9, 8, 9, 9, 9, 9, 9, 
	9, 9, 10, 9, 4, 3, 1, 3, 
	2, 1
};

static const char _PostProcess_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 2, 3, 0, 2, 
	3, 0
};

static const short _PostProcess_index_offsets[] = {
	0, 0, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 20, 22, 24, 26, 28, 
	30, 32, 34, 36, 38, 40, 42, 44, 
	46, 48, 50, 52, 54, 56, 58, 60, 
	62, 64, 66, 68, 70, 72, 74, 76, 
	78, 80, 82, 84, 86, 88, 90, 92, 
	94, 96, 98, 100, 102, 104, 106, 108, 
	110, 112, 114, 117, 119, 121, 123, 125, 
	127, 129, 131, 133, 135, 137, 139, 141, 
	143, 145, 147, 149, 151, 153, 155, 157, 
	159, 161, 163, 165, 167, 169, 171, 173, 
	175, 177, 179, 181, 196, 208, 222, 235, 
	248, 261, 274, 287, 300, 313, 326, 339, 
	352, 365, 378, 391, 404, 417, 430, 443, 
	456, 469, 482, 494, 507, 520, 533, 546, 
	559, 572, 585, 599, 612, 619, 626, 628, 
	634, 640
};

static const unsigned char _PostProcess_indicies[] = {
	1, 0, 2, 0, 3, 0, 4, 0, 
	5, 0, 6, 0, 7, 0, 8, 0, 
	9, 0, 10, 0, 11, 0, 12, 0, 
	13, 0, 14, 0, 15, 0, 16, 0, 
	17, 0, 18, 0, 19, 0, 20, 0, 
	21, 0, 22, 0, 23, 0, 24, 0, 
	25, 0, 26, 0, 27, 0, 28, 0, 
	29, 0, 30, 0, 31, 0, 32, 0, 
	33, 0, 34, 0, 35, 0, 36, 0, 
	37, 0, 38, 0, 39, 0, 40, 0, 
	41, 0, 42, 0, 43, 0, 44, 0, 
	45, 0, 46, 0, 47, 0, 48, 0, 
	49, 0, 50, 0, 51, 0, 52, 0, 
	53, 0, 54, 55, 57, 56, 58, 56, 
	59, 56, 60, 61, 56, 62, 56, 63, 
	56, 64, 56, 65, 56, 66, 56, 67, 
	56, 68, 56, 69, 56, 70, 56, 71, 
	56, 72, 56, 73, 56, 74, 56, 75, 
	56, 76, 56, 77, 56, 78, 56, 79, 
	56, 80, 56, 81, 56, 82, 56, 83, 
	56, 84, 56, 86, 85, 87, 85, 88, 
	85, 89, 85, 90, 85, 91, 85, 92, 
	85, 93, 85, 94, 85, 96, 96, 96, 
	96, 96, 96, 97, 98, 99, 96, 96, 
	96, 96, 96, 95, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 95, 
	101, 101, 101, 101, 101, 101, 102, 103, 
	101, 101, 101, 101, 101, 95, 101, 101, 
	101, 101, 101, 101, 104, 101, 101, 101, 
	101, 101, 95, 101, 101, 101, 101, 101, 
	101, 105, 101, 101, 101, 101, 101, 95, 
	101, 101, 101, 101, 101, 101, 106, 101, 
	101, 101, 101, 101, 95, 101, 101, 101, 
	101, 101, 101, 107, 101, 101, 101, 101, 
	101, 95, 101, 101, 101, 101, 101, 101, 
	108, 101, 101, 101, 101, 101, 95, 101, 
	101, 101, 101, 101, 101, 109, 101, 101, 
	101, 101, 101, 95, 101, 101, 101, 101, 
	101, 101, 110, 101, 101, 101, 101, 101, 
	95, 101, 101, 101, 101, 101, 101, 111, 
	101, 101, 101, 101, 101, 95, 101, 101, 
	101, 101, 101, 101, 112, 101, 101, 101, 
	101, 101, 95, 101, 101, 101, 101, 101, 
	101, 113, 101, 101, 101, 101, 101, 95, 
	101, 101, 101, 101, 101, 101, 114, 101, 
	101, 101, 101, 101, 95, 101, 101, 101, 
	101, 101, 101, 115, 101, 101, 101, 101, 
	101, 95, 101, 101, 101, 101, 101, 101, 
	116, 101, 101, 101, 101, 101, 95, 101, 
	101, 101, 101, 101, 101, 117, 101, 101, 
	101, 101, 101, 95, 101, 101, 101, 101, 
	101, 101, 118, 101, 101, 101, 101, 101, 
	95, 101, 101, 101, 101, 101, 101, 119, 
	101, 101, 101, 101, 101, 95, 101, 101, 
	101, 101, 101, 101, 120, 101, 101, 101, 
	101, 101, 95, 101, 101, 101, 101, 101, 
	101, 121, 101, 101, 101, 101, 101, 95, 
	101, 101, 101, 101, 101, 101, 122, 101, 
	101, 101, 101, 101, 95, 101, 101, 101, 
	101, 101, 101, 123, 101, 101, 101, 101, 
	101, 95, 101, 101, 101, 101, 101, 124, 
	101, 101, 101, 101, 101, 95, 101, 101, 
	101, 101, 101, 101, 125, 101, 101, 101, 
	101, 101, 95, 101, 101, 101, 101, 101, 
	101, 126, 101, 101, 101, 101, 101, 95, 
	101, 101, 101, 101, 101, 101, 127, 101, 
	101, 101, 101, 101, 95, 101, 101, 101, 
	101, 101, 101, 128, 101, 101, 101, 101, 
	101, 95, 101, 101, 129, 101, 101, 101, 
	101, 101, 101, 101, 101, 101, 95, 101, 
	101, 101, 101, 101, 101, 130, 101, 101, 
	101, 101, 101, 95, 101, 101, 101, 101, 
	101, 101, 131, 101, 101, 101, 101, 101, 
	95, 101, 101, 132, 101, 101, 101, 101, 
	133, 101, 101, 101, 101, 101, 95, 101, 
	101, 134, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 95, 135, 136, 135, 135, 
	135, 135, 55, 135, 135, 135, 135, 135, 
	135, 137, 139, 138, 140, 140, 141, 140, 
	140, 55, 140, 140, 140, 140, 140, 142, 
	144, 143, 0
};

static const unsigned char _PostProcess_trans_targs[] = {
	91, 2, 3, 4, 5, 6, 91, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 91, 19, 20, 21, 22, 23, 24, 
	25, 26, 27, 28, 29, 30, 31, 32, 
	33, 34, 35, 91, 37, 38, 39, 40, 
	41, 42, 43, 44, 45, 46, 47, 48, 
	49, 50, 51, 52, 53, 91, 126, 0, 
	124, 56, 57, 58, 59, 71, 60, 61, 
	62, 63, 64, 65, 66, 67, 68, 69, 
	70, 124, 72, 73, 74, 75, 76, 77, 
	78, 79, 80, 81, 124, 127, 83, 84, 
	85, 86, 87, 88, 89, 90, 127, 92, 
	91, 93, 115, 120, 91, 91, 94, 112, 
	95, 96, 97, 98, 99, 100, 101, 102, 
	103, 104, 105, 106, 107, 108, 109, 110, 
	111, 92, 113, 114, 1, 116, 117, 118, 
	119, 7, 121, 122, 18, 123, 36, 125, 
	54, 124, 124, 55, 128, 129, 127, 127, 
	82
};

static const char _PostProcess_trans_actions[] = {
	37, 0, 0, 0, 0, 0, 31, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 29, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 27, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 25, 5, 0, 
	15, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 7, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 9, 23, 0, 0, 
	0, 0, 0, 0, 0, 0, 17, 44, 
	33, 0, 0, 0, 39, 35, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 41, 0, 5, 0, 0, 0, 0, 
	5, 0, 0, 5, 0, 5, 0, 0, 
	0, 11, 13, 0, 0, 5, 21, 19, 
	0
};

static const char _PostProcess_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 1, 
	0, 0
};

static const char _PostProcess_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 3, 0, 0, 3, 
	0, 0
};

static const short _PostProcess_eof_trans[] = {
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 57, 57, 57, 57, 57, 57, 
	57, 57, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 0, 101, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 0, 138, 139, 0, 
	143, 144
};

static const int PostProcess_start = 91;
static const int PostProcess_first_final = 91;
static const int PostProcess_error = 0;

static const int PostProcess_en_retvals = 124;
static const int PostProcess_en_mtocsubst = 127;
static const int PostProcess_en_main = 91;


#line 90 "postprocess.rl"


class PostProcess
{

public:
  // constructor
  PostProcess(const string & filename) :
    filename_(filename),
    line(1),
    ts(0), te(0), have(0)
  { }

  // run postprocessor
  int execute()
  {
    std::ios::sync_with_stdio(false);

    
#line 408 "postprocess.cc"
	{
	cs = PostProcess_start;
	ts = 0;
	te = 0;
	act = 0;
	}

#line 109 "postprocess.rl"

    ifstream is;
    try
    {
      is.open(filename_.c_str());
    }
    catch (std::ifstream::failure e)
    {
      cerr << "Exception opening/reading file";
      exit(-1);
    }

    is.seekg(0, ios_base::end);
    int length = is.tellg();
    is.seekg(0, ios_base::beg);

    char * buf = new char[(int)(1.1*length)];
    char * p = buf;
//    char * tmp_p = p;

    is.read(buf, length);
    is.close();

    ofstream fout;
    try
    {
      fout.open(filename_.c_str(), ios_base::trunc);
    }
    catch (std::ofstream::failure e)
    {
      cerr << "Exception opening/writing file";
      exit(-1);
    }

    int len = is.gcount();
    char *pe = p + len;
    char *eof = pe;

    
#line 456 "postprocess.cc"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_acts = _PostProcess_actions + _PostProcess_from_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
#line 1 "NONE"
	{ts = p;}
	break;
#line 477 "postprocess.cc"
		}
	}

	_keys = _PostProcess_trans_keys + _PostProcess_key_offsets[cs];
	_trans = _PostProcess_index_offsets[cs];

	_klen = _PostProcess_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _PostProcess_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _PostProcess_indicies[_trans];
_eof_trans:
	cs = _PostProcess_trans_targs[_trans];

	if ( _PostProcess_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _PostProcess_actions + _PostProcess_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 2:
#line 1 "NONE"
	{te = p+1;}
	break;
	case 3:
#line 50 "postprocess.rl"
	{te = p+1;{ fout << "] ="; {cs = 91; goto _again;} }}
	break;
	case 4:
#line 53 "postprocess.rl"
	{te = p+1;{ fout << " ="; {cs = 91; goto _again;} }}
	break;
	case 5:
#line 47 "postprocess.rl"
	{te = p;p--;{ fout.write(ts, te - ts); }}
	break;
	case 6:
#line 56 "postprocess.rl"
	{te = p;p--;{ fout <<", "; }}
	break;
	case 7:
#line 56 "postprocess.rl"
	{{p = ((te))-1;}{ fout <<", "; }}
	break;
	case 8:
#line 65 "postprocess.rl"
	{te = p+1;{ {cs = 91; goto _again;} }}
	break;
	case 9:
#line 61 "postprocess.rl"
	{te = p;p--;}
	break;
	case 10:
#line 63 "postprocess.rl"
	{te = p;p--;}
	break;
	case 11:
#line 61 "postprocess.rl"
	{{p = ((te))-1;}}
	break;
	case 12:
#line 82 "postprocess.rl"
	{act = 12;}
	break;
	case 13:
#line 85 "postprocess.rl"
	{act = 13;}
	break;
	case 14:
#line 70 "postprocess.rl"
	{te = p+1;{ fout << "function ["; {cs = 124; goto _again;} }}
	break;
	case 15:
#line 73 "postprocess.rl"
	{te = p+1;{ fout << "function "; {cs = 124; goto _again;} }}
	break;
	case 16:
#line 76 "postprocess.rl"
	{te = p+1;{fout << "function ";}}
	break;
	case 17:
#line 79 "postprocess.rl"
	{te = p+1;{ {cs = 127; goto _again;} }}
	break;
	case 18:
#line 88 "postprocess.rl"
	{te = p+1;{fout << *ts;}}
	break;
	case 19:
#line 85 "postprocess.rl"
	{te = p;p--;{ fout.write(ts, te-ts); }}
	break;
	case 20:
#line 85 "postprocess.rl"
	{{p = ((te))-1;}{ fout.write(ts, te-ts); }}
	break;
	case 21:
#line 1 "NONE"
	{	switch( act ) {
	case 12:
	{{p = ((te))-1;}fout << " ";}
	break;
	case 13:
	{{p = ((te))-1;} fout.write(ts, te-ts); }
	break;
	}
	}
	break;
#line 631 "postprocess.cc"
		}
	}

_again:
	_acts = _PostProcess_actions + _PostProcess_to_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 0:
#line 1 "NONE"
	{ts = 0;}
	break;
#line 644 "postprocess.cc"
		}
	}

	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _PostProcess_eof_trans[cs] > 0 ) {
		_trans = _PostProcess_eof_trans[cs] - 1;
		goto _eof_trans;
	}
	}

	_out: {}
	}

#line 148 "postprocess.rl"

    /* Check if we failed. */
    if ( cs == PostProcess_error )
    {
      /* Machine failed before finding a token. */
      cerr << filename_ << ": PARSE ERROR in line " << line << endl;
      exit(-1);
    }

    fout.close();
    delete buf;

    return 0;
  }

private:
  string filename_;
  int          line            , col;
  char        *ts              , *te;
  int          act             , have;
  int          cs;
  /*int          top;
  int          stack[5];*/

};

void usage()
{
  cout
    << "Usage: ./postprocess filename" << endl;
}

int main(int argc, char ** argv)
{
  string filename;
  if(argc >= 2)
  {
    if (std::string("--help") == std::string(argv[1]))
    {
      usage();
    }
    filename = argv[1];
  }
  else
  {
    cerr << "wrong number of arguments!" << endl;
    exit(-2);
  }

  PostProcess scanner(filename);
  scanner.execute();
  return 0;
}

/* vim: set et sw=2 ft=ragel: */

